#version 450

#include "structures.glsl"

layout(local_size_x = WARP_SIZE) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer ObjectInputDataBuffer {
    ObjectInputData object_input[];
};
layout(set = 1, binding = 0, std430) restrict writeonly buffer ObjectOutputDataBuffer {
    ObjectOutputData object_output[];
};
layout(set = 1, binding = 1, std430) restrict writeonly buffer IndirectBuffer {
    IndirectCall indirect_call[];
};
layout(set = 1, binding = 2, std430) restrict buffer IndirectCountBuffer {
    uint indirect_counter;
};
layout(set = 2, binding = 0) uniform UniformBuffer {
    UniformData uniforms;
};
layout(push_constant) uniform PushConstants {
    uint object_count;
};

void main() {
    uint input_idx = gl_GlobalInvocationID.x;

    if (input_idx >= object_count) {
        return;
    }

    ObjectInputData in_data = object_input[input_idx];

    ObjectOutputData out_data;
    out_data.model_view_proj = uniforms.view_proj * in_data.transform;
    out_data.inv_trans_model_view = inverse(transpose(mat3(uniforms.view * in_data.transform)));
    out_data.material_translation_idx = in_data.material_translation_idx;

    uint output_idx = atomicAdd(indirect_counter, 1);

    object_output[output_idx] = out_data;

    IndirectCall call;
    call.vertex_count = in_data.count;
    call.instance_count = 1;
    call.base_index = in_data.start_idx;
    call.vertex_offset = in_data.vertex_offset;
    call.base_instance = 0;
    indirect_call[output_idx] = call;
}
