#version 450

#include "structures.glsl"

layout(local_size_x = WARP_SIZE) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer ObjectInputDataBuffer {
    ObjectInputData object_input[];
};
layout(set = 1, binding = 0, std430) restrict writeonly buffer IndexBuffer {
    uint object_index[];
};
layout(set = 1, binding = 1, std430) restrict writeonly buffer StatusBuffer {
    bool status[];
};
layout(set = 2, binding = 0) uniform UniformBuffer {
    UniformData uniforms;
};
layout(push_constant) uniform PushConstants {
    uint object_count;
};

float plane_distance(Plane plane, vec3 location) {
    return dot(plane.inner.xyz, location) + plane.inner.w;
}

bool frustum_contains_sphere(Frustum frustum, vec4 sphere) {
    vec3 location = sphere.xyz;
    float neg_radius = -sphere.w;

    if (!(plane_distance(frustum.left, location) >= neg_radius)) {
        return false;
    }
    if (!(plane_distance(frustum.right, location) >= neg_radius)) {
        return false;
    }
    if (!(plane_distance(frustum.top, location) >= neg_radius)) {
        return false;
    }
    if (!(plane_distance(frustum.bottom, location) >= neg_radius)) {
        return false;
    }
    if (!(plane_distance(frustum.near, location) >= neg_radius)) {
        return false;
    }

    return true;
}

vec4 transform_sphere(vec4 sphere, mat4 transform) {
    float max_scale = max(max(length(transform[0].xyz), length(transform[1].xyz)), length(transform[2].xyz));
    vec4 center = transform * vec4(sphere.xyz, 1.0);

    return vec4(center.xyz, sphere.w * max_scale);
}

void main() {
    uint input_idx = gl_GlobalInvocationID.x;

    if (input_idx >= object_count) {
        return;
    }

    ObjectInputData data = object_input[input_idx];

    mat4 model_view = uniforms.view * data.transform;
    vec4 mesh_sphere = transform_sphere(data.bounding_sphere, model_view);

    bool visible = frustum_contains_sphere(uniforms.frustum, mesh_sphere);

    uint add_value = uint(visible);
    object_index[input_idx] = add_value;
    status[input_idx] = visible;
}
